######################################################################
# makepixy
#
# Builds Pixy demo app using gmake instead of cmake madness
######################################################################

ifndef PIXY_HOME
PIXY_HOME := "/home/pi/pixy2"
endif
PIXY_INCLUDES = -I$(PIXY_HOME)/src/common/inc \
   -I$(PIXY_HOME)/src/host/libpixyusb2/include \
   -I$(PIXY_HOME)/src/host/arduino/libraries/Pixy2 \
   -I/usr/include/libusb-1.0

# Libraries that need to be linked: libpixyusb libusb-2.0 libusb boost-thread boost-system boost-chrono
# -L defines library search paths; -l defines library name (minus "lib" prefix)
#PIXY_LIBS = -L$(PIXY_HOME)/build/libpixyusb2 -lpixy2 \
#   -L/usr/lib/arm-linux-gnueabihf -lboost_thread -lboost_system \
#   -lboost_chrono -lpthread -lusb-1.0
PIXY_LIBS = -L$(PIXY_HOME)/build/libpixyusb2 -lpixy2 \
   -L/usr/lib/aarch64-linux-gnu -lboost_thread -lboost_system \
   -lboost_chrono -lpthread -lusb-1.0
#CXX_DEFINES = -D__LIBPIXY_VERSION__=\"0.4\"

# If undefined in the environment default NDDSHOME to install dir
ifndef NDDSHOME
NDDSHOME := "/Applications/rti_connext_dds-6.1.1"
endif

#TARGET_ARCH = armv7aLinux3.12gcc4.9.3cortex-a9
#TARGET_ARCH = armv6vfphLinux3.xgcc4.7.2
TARGET_ARCH = armv8Linux4gcc7.3.0

ifndef COMPILER
COMPILER = aarch64-linux-gnu-g++
endif
COMPILER_FLAGS =
ifndef LINKER
LINKER = aarch64-linux-gnu-g++
endif
LINKER_FLAGS = -static-libgcc
#SYSLIBS = -ldl -lnsl -lm -lpthread -lrt
SYSLIBS = -ldl -lm -lpthread -lrt -no-pie -rdynamic
#DEFINES = -fpic -DRTI_UNIX -DRTI_LINUX -march=armv6 -mlong-calls -D__LIBPIXY_VERSION__=\"0.4\"
DEFINES = -fPIC -DRTI_UNIX -DRTI_LINUX -DRTI_64BIT -funwind-tables 
ifndef DEBUG
DEBUG=0 
endif
ifeq ($(DEBUG),1)
COMPILER_FLAGS += -g -O0
LINKER_FLAGS += -g
DEBUG_SFX = d
else
DEBUG_SFX = 
endif

ifndef SHAREDLIB
SHAREDLIB=1
endif

ifeq ($(SHAREDLIB),1)
SHAREDLIB_SFX = 
else
SHAREDLIB_SFX = z
DEFINES += -DRTI_STATIC
endif

INCLUDES = -I. -I$(NDDSHOME)/include -I$(NDDSHOME)/include/ndds

LIBS = -L$(NDDSHOME)/lib/$(TARGET_ARCH) \
        -lnddscpp$(SHAREDLIB_SFX)$(DEBUG_SFX) -lnddsc$(SHAREDLIB_SFX)$(DEBUG_SFX) -lnddscore$(SHAREDLIB_SFX)$(DEBUG_SFX) \
        $(SYSLIBS)
       -lssl -lcrypto

CDRSOURCES    = ShapeType.idl
COMMONSOURCES = ShapeTypeSupport.cxx ShapeTypePlugin.cxx ShapeType.cxx \
                ServoControlSupport.cxx ServoControlPlugin.cxx ServoControl.cxx

#EXEC          = ShapeType_subscriber ShapeType_publisher pixyshapes
EXEC          = pixyshapes
DIRECTORIES   = objs.dir objs/$(TARGET_ARCH).dir
COMMONOBJS    = $(COMMONSOURCES:%.cxx=objs/$(TARGET_ARCH)/%.o)

# We actually stick the objects in a sub directory to keep your directory clean.
$(TARGET_ARCH) : $(DIRECTORIES) $(COMMONOBJS) \
	$(EXEC:%=objs/$(TARGET_ARCH)/%.o) \
	$(EXEC:%=objs/$(TARGET_ARCH)/%)

objs/$(TARGET_ARCH)/% : objs/$(TARGET_ARCH)/%.o
	$(LINKER) $(LINKER_FLAGS)   -o $@ $@.o $(COMMONOBJS) $(PIXY_LIBS) $(LIBS)
#	$(LINKER) $(LINKER_FLAGS)   -o $@ $@.o $(COMMONOBJS) $(LIBS)

objs/$(TARGET_ARCH)/%.o : %.cxx  ShapeType.h
	$(COMPILER) $(COMPILER_FLAGS)  -o $@ $(DEFINES) $(PIXY_INCLUDES) $(INCLUDES) -c $<


 show-%  : ; @echo $* = $($*)
#
# Uncomment these lines if you want the support files regenerated when idl
# file is modified
#
#
#  ShapeTypeSupport.cxx ShapeTypePlugin.cxx ShapeType.cxx \
#  ShapeTypeSupport.h ShapeTypePlugin.h ShapeType.h : \
#		ShapeType.idl
#	$(NDDSHOME)/bin/rtiddsgen ShapeType.idl -replace -language C++

# Here is how we create those subdirectories automatically.
%.dir :
	@echo "Checking directory $*"
	@if [ ! -d $* ]; then \
		echo "Making directory $*"; \
		mkdir -p $* ; \
	fi;
